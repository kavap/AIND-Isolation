################################# MIN - MAX DECISION ####################################



######## Generic Min-Max with Iterative Deepening Search Psudo code ########

function ITERATIVE-DEEPENING-SEARCH(state,time_left_calculator,safe_time_threshold) returns an action
	action = FAILUE
	for depth = 1 to ∞ do
		if time_left_calculator() ≤ safe_time_threshold
			return action
		level_action ← MINIMAX-DECISION(state,depth,time_left_calculator,safe_time_threshold)
		if level_action != FAILUE
			action = level_action
		else
			return action


function MINIMAX-DECISION(state,allowed-search-depth,time_left_calculator,safe_time_threshold) returns an action
	action = FAILURE
	v ← −∞
	for a in ACTIONS(state) do
		if time_left_calculator() ≤ safe_time_threshold
			return FAILURE
    	v1 ← MIN-VALUE(RESULT(state, a), allowed-search-depth,time_left_calculator,safe_time_threshold)
		if v1 == FAILURE
			return FAILURE
		else 
			if v1 > v
				v = v1
				action = a
	return action

function MAX-VALUE(state,allowed-search-depth,time_left_calculator,safe_time_threshold) returns a utility value
	if time_left_calculator() ≤ safe_time_threshold
		return FAILURE
	if TERMINAL-TEST(state) then return UTILITY(state)
	v ← −∞
	for each a in ACTIONS(state) do
		if time_left_calculator() ≤ safe_time_threshold
			return FAILURE
    	v1 ← MIN-VALUE(RESULT(state, a), allowed-search-depth,time_left_calculator,safe_time_threshold)
		if v1 == FAILURE
			return FAILURE
		else 
			if v1 > v
				v = v1
	return v

function MIN-VALUE(state,allowed-search-depth,time_left_calculator,safe_time_threshold) returns a utility value
	if time_left_calculator() ≤ safe_time_threshold
		return FAILURE
	if TERMINAL-TEST(state) then return UTILITY(state)
	v ← ∞
	for each a in ACTIONS(state) do
		if time_left_calculator() ≤ safe_time_threshold
			return FAILURE
    	v1 ← MAX-VALUE(RESULT(state, a), allowed-search-depth,time_left_calculator,safe_time_threshold)
		if v1 == FAILURE
			return FAILURE
		else 
			if v1 < v
				v = v1
	return v


######## Psudo code specific to Game of Isolation with added Depth limited Search constraint. This Psudo code leverages Python Symantics. ########


################################# ALPHA - BETA PRUNING ####################################



######## Generic Alpha-Beta Prunning with Iterative Deepening Search Psudo code  ########


function ITERATIVE-DEEPENING-SEARCH(state,time_left_calculator,safe_time_threshold) returns an action
	action = FAILUE
	for depth = 1 to ∞ do
		if time_left_calculator() ≤ safe_time_threshold
			return action
		level_action ← ALPHA-BETA-SEARCH(state,depth,time_left_calculator,safe_time_threshold)
		if level_action != FAILUE
			action = level_action
		else
			return action


function ALPHA-BETA-SEARCH(state,allowed-search-depth,time_left_calculator,safe_time_threshold) returns an action
	action = FAILURE
	v ← −∞
	for a in ACTIONS(state) do
		if time_left_calculator() ≤ safe_time_threshold
			return FAILURE
    	v1 ← MIN-VALUE(RESULT(state, a), −∞, +∞, allowed-search-depth,time_left_calculator,safe_time_threshold)
		if v1 == FAILURE
			return FAILURE
		else 
			if v1 > v
				v = v1
				action = a
	return action

function MAX-VALUE(state,α,β,allowed-search-depth,time_left_calculator,safe_time_threshold) returns a utility value
	if time_left_calculator() ≤ safe_time_threshold
		return FAILURE
	if TERMINAL-TEST(state) then return UTILITY(state)
	v ← −∞
	for each a in ACTIONS(state) do
		if time_left_calculator() ≤ safe_time_threshold
			return FAILURE
    	v1 ← MIN-VALUE(RESULT(state, a),α,β,allowed-search-depth,time_left_calculator,safe_time_threshold)
		if v1 == FAILURE
			return FAILURE
		else 
			if v1 > v
				v = v1
    		if v ≥ β then return v
    			α ← MAX(α, v)
	return v

function MIN-VALUE(state,α,β,allowed-search-depth,time_left_calculator,safe_time_threshold) returns a utility value
	if time_left_calculator() ≤ safe_time_threshold
		return FAILURE
	if TERMINAL-TEST(state) then return UTILITY(state)
	v ← ∞
	for each a in ACTIONS(state) do
		if time_left_calculator() ≤ safe_time_threshold
			return FAILURE
    	v1 ← MAX-VALUE(RESULT(state, a),α,β,allowed-search-depth,time_left_calculator,safe_time_threshold)
		if v1 == FAILURE
			return FAILURE
		else 
			if v1 < v
				v = v1
    		if v ≤ α then return v
    			β ← MIN(β, v)
	return v



######## Psudo code specific to Game of Isolation with added Depth limited Search constraint. This Psudo code leverages Python Symantics. ########


######## Git checkin this version

######## Psudo code specific to Game of Isolation with added Iterative Deepening. This Psudo code leverages Python Symantics. ########

######## Git checkin this version


######## Psudo code specific to Game of Isolation with added Iterative Deepening, Memoization and Game Board Symmetry, Opening Book. This Psudo code leverages Python Symantics. ########

######## Git checkin this version



